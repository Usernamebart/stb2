package pl.akademiaqa.bugs;

import com.github.javafaker.Faker;
import io.restassured.http.ContentType;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import org.apache.http.HttpStatus;
import org.json.JSONObject;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static io.restassured.RestAssured.given;
import static pl.akademiaqa.bugs.ReadBugsTest.BASE_URL;

class CreateNewBugTest {

    private static Faker faker;
    private String randomDescription;
    private String randomTitle;
    private String randomStatus;

    @BeforeAll
    static void beforeAll() {
        faker = new Faker();
    }

    @BeforeEach
    void beforeEach() {
        randomDescription = faker.twinPeaks().quote();
        randomTitle = faker.howIMetYourMother().catchPhrase();
        randomStatus = faker.color().name();
    }

    @Test
    void createNewBugTest() {

        JSONObject bug = new JSONObject();
        bug.put("title", randomTitle);
        bug.put("description", randomDescription);
        bug.put("employeeId", "2");
        bug.put("status", randomStatus);

        Response response = given()
                .contentType(ContentType.JSON)
                .body(bug.toString())
                .when()
                .post(BASE_URL)
                .then()
                .extract()
                .response();

        response.prettyPeek();

        Assertions.assertEquals(HttpStatus.SC_CREATED, response.statusCode());

        JsonPath json = response.jsonPath();
        Assertions.assertEquals(randomTitle, json.getString("title"));
        Assertions.assertEquals(randomDescription, json.getString("description"));
        Assertions.assertEquals(randomStatus, json.getString("status"));

    }

}
