{
	"info": {
		"_postman_id": "75ca4738-624d-4275-9202-d83828d48241",
		"name": "CRUD on /employees",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14390426"
	},
	"item": [
		{
			"name": "Get all employees",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Should return non empty list of employees', function() {\r",
							"    pm.expect(json).to.be.not.empty;\r",
							"});\r",
							"\r",
							"// sprawdzenie czy na początku testów lista pracowników jest rowna 5\r",
							"pm.test('Should return list of 5 employees', function() {\r",
							"    pm.expect(Object.keys(pm.response.json()).length).to.eql(5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/employees",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get employee with given ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Should return non empty list of employees', function() {\r",
							"    pm.expect(json).to.be.not.empty;\r",
							"});\r",
							"\r",
							"pm.test('Should return employee with ID 1', function(){\r",
							"    pm.expect(json.id).to.equal(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/employees/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"employees",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get employees with given first name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Should return non empty list of employees', function() {\r",
							"    pm.expect(json).to.be.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Should return employees with first name Kasia\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('Kasia');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/employees?firstName=Kasia",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"employees"
					],
					"query": [
						{
							"key": "firstName",
							"value": "Kasia"
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get employees with given city",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Should return non empty list of employees', function() {\r",
							"    pm.expect(json).to.be.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Should return employees with city Wrocław\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('Wrocław');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/employees?q=Wrocław",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"employees"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "q",
							"value": "Wrocław"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new employee (1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Should return correct role\", function () {\r",
							"    pm.expect(json.role).to.equal('ceo');\r",
							"});\r",
							"\r",
							"pm.globals.set('id', json.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"\",\r\n    \"firstName\": \"Tony\",\r\n    \"lastName\": \"Stark\",\r\n    \"username\": \"Ironman\",\r\n    \"email\": \"tony@avenger.us\",\r\n    \"phone\": \"500-200-001\",\r\n    \"website\": \"starkindustries.us\",\r\n    \"role\": \"ceo\",\r\n    \"type\": \"b2b\",\r\n    \"address\": {\r\n        \"street\": \"Malibu Point 10880\",\r\n        \"suite\": \"Advanced Modern, Elegant, Circular shape\",\r\n        \"city\": \"Malibu, California\",\r\n        \"zipcode\": \"90265\"\r\n    },\r\n    \"company\": {\r\n        \"companyName\": \"Stark Industries\",\r\n        \"taxNumber\": \"999-888-777\",\r\n        \"companyPhone\": \"000-999-454\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/employees",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get new (1) employee with given ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Should return non empty list of employees', function() {\r",
							"    pm.expect(json).to.be.not.empty;\r",
							"});\r",
							"\r",
							"pm.test('Should return employee with ID 6', function(){\r",
							"    pm.expect(json.id).to.equal(6);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/employees/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"employees",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new employee (2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Should return correct role\", function () {\r",
							"    pm.expect(json.role).to.equal('hero');\r",
							"});\r",
							"\r",
							"pm.globals.set('id', json.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"\",\r\n    \"firstName\": \"Steve\",\r\n    \"lastName\": \"Rogers\",\r\n    \"username\": \"Captain America\",\r\n    \"email\": \"steve@avenger.us\",\r\n    \"phone\": \"500-200-002\",\r\n    \"website\": \"captainswebsite.us\",\r\n    \"role\": \"hero\",\r\n    \"type\": \"n/a\",\r\n    \"address\": {\r\n        \"street\": \"Secret\",\r\n        \"suite\": \"Top floor\",\r\n        \"city\": \"Brooklyn Heights\",\r\n        \"zipcode\": \"44131\"\r\n    },\r\n    \"company\": {\r\n        \"companyName\": \"n/a\",\r\n        \"taxNumber\": \"n/a\",\r\n        \"companyPhone\": \"n/a\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/employees",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit employee (2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should return correct company name\", function () {\r",
							"    pm.expect(json.company.companyName).to.equal('Avengers');\r",
							"});\r",
							"\r",
							"pm.globals.set('id', json.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"Steve\",\r\n    \"lastName\": \"Rogers\",\r\n    \"username\": \"Captain America\",\r\n    \"email\": \"steve@avenger.us\",\r\n    \"phone\": \"500-200-002\",\r\n    \"website\": \"captainswebsite.us\",\r\n    \"role\": \"hero\",\r\n    \"type\": \"n/a\",\r\n    \"address\": {\r\n        \"street\": \"Secret\",\r\n        \"suite\": \"Top floor\",\r\n        \"city\": \"Brooklyn Heights\",\r\n        \"zipcode\": \"44131\"\r\n    },\r\n    \"company\": {\r\n        \"companyName\": \"Avengers\",\r\n        \"taxNumber\": \"n/a\",\r\n        \"companyPhone\": \"n/a\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/employees/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"employees",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete employee (2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/employees/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"employees",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all employees",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Should return non empty list of employees', function() {\r",
							"    pm.expect(json).to.be.not.empty;\r",
							"});\r",
							"\r",
							"pm.test('Should contain employee with firstName Tony', function() {\r",
							"    pm.expect(pm.response.text()).to.include('Tony');\r",
							"});\r",
							"\r",
							"pm.globals.set('id', json.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/employees",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit employee (1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should return correct type\", function () {\r",
							"    pm.expect(json.type).to.equal('n/a');\r",
							"});\r",
							"\r",
							"pm.globals.set('id', json.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"type\": \"n/a\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/employees/6",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"employees",
						"6"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete employee (1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/employees/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"employees",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all employees",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Should return non empty list of employees', function() {\r",
							"    pm.expect(json).to.be.not.empty;\r",
							"});\r",
							"\r",
							"// sprawdzenie czy na koniec testów lista pracowników jest rowna 5\r",
							"pm.test('Should return list of 5 employees', function() {\r",
							"    pm.expect(Object.keys(pm.response.json()).length).to.eql(5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/employees",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"employees"
					]
				}
			},
			"response": []
		}
	]
}